# %% [markdown]
# # Hierarchical timeseries
# In this example, we will show how to forecast hierarchical timeseries
# with the univariate `Prophetverse` and `HierarchicalProphet` models
#
# The univariate `Prophetverse` model can seamlessly handle hierarchical timeseries
# due to the package's compatibility with sktime. The `HierarchicalProphet` model
# is specifically designed to handle hierarchical timeseries, by forecasting all
# bottom-level series at once.
#
# !!! note
#     Currently, some features of the univariate Prophet are not available in the hierarchical
#     version, such as likelihoods different from Gaussian. We are looking forward to
#     adding these features in the future.


# %% {"tags" : ["remove_cell"]}
# Disable warnings
import warnings

warnings.simplefilter(action="ignore")

# %%
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from prophetverse.datasets.loaders import load_tourism

# %% [markdown]
# ## Import dataset
#
# Here we use the tourism dataset with purpose-level aggregation.
# %%


y = load_tourism(groupby="Purpose")
display(y)

# %% [markdown]

# We define the helper function below to plot the predictions and the observations.

# %%
LEVELS = y.index.get_level_values(0).unique()


def plot_preds(y=None, preds={}, axs=None):

    if axs is None:
        fig, axs = plt.subplots(
            figsize=(12, 8), nrows=int(np.ceil(len(LEVELS) / 2)), ncols=2
        )
    ax_generator = iter(axs.flatten())
    for level in LEVELS:
        ax = next(ax_generator)
        if y is not None:
            y.loc[level].iloc[:, 0].rename("Observation").plot(
                ax=ax, label="truth", color="black"
            )
        for name, _preds in preds.items():
            _preds.loc[level].iloc[:, 0].rename(name).plot(ax=ax, legend=True)
        ax.set_title(level)

    # Tight layout
    plt.tight_layout()
    return ax


# %% [markdown]
# ## Fit univariate model
#
# Because of sktime's amazing interface, we can use the univariate Prophet seamlessly with hierarchical data. We do not reconcile it here, but it could be achieved with the `Reconciler` class.


# %%

import jax.numpy as jnp

from prophetverse.effects import LinearFourierSeasonality
from prophetverse.effects.trend import (PiecewiseLinearTrend,
                                        PiecewiseLogisticTrend)
from prophetverse.engine import MAPInferenceEngine
from prophetverse.sktime.univariate import Prophetverse
from prophetverse.utils import no_input_columns

model = Prophetverse(
    trend=PiecewiseLogisticTrend(
        changepoint_prior_scale=0.1,
        changepoint_interval=8,
        changepoint_range=-8,
    ),
    exogenous_effects=[
        (
            "seasonality",
            LinearFourierSeasonality(
                sp_list=["Y"],
                fourier_terms_list=[1],
                freq="Q",
                prior_scale=0.1,
                effect_mode="multiplicative",
            ),
            no_input_columns,
        )
    ],
    inference_engine=MAPInferenceEngine()
)
model.fit(y=y)

# %% [markdown]
# ### Forecasting with automatic upcasting
# To call the same methods we used in the univariate case, we do not need to change
# a single line of code. The only difference is that the output will be a `pd.DataFrame`
# with more rows and index levels.

# %%
forecast_horizon = pd.period_range("1997Q1",
                                   "2020Q4",
                                   freq="Q")
preds = model.predict(fh=forecast_horizon)
display(preds.head())

# Plot
plot_preds(y, {"Prophet": preds})
plt.show()

# %% [markdown]
# The same applies to the decomposition method:

# %%
decomposition = model.predict_components(fh=forecast_horizon)
decomposition.head()
# %% [markdown]
# ## Hierarchical Prophet
#
# Now, let's use the hierarchical prophet to forecast all of the series at once.
# The interface here is the same as the univariate case. The fit step can
# take a little longer since there are more parameters to estimate.

# %%

from prophetverse.logger import logger

# Set debug level everywhere
logger.setLevel("DEBUG")
logger = logger.getChild("lbfgs")
logger.setLevel("DEBUG")
import numpyro

from prophetverse.sktime.multivariate import HierarchicalProphet

numpyro.enable_x64()
model_hier = HierarchicalProphet(
    trend=PiecewiseLogisticTrend(
        changepoint_prior_scale=0.1,
        changepoint_interval=8,
        changepoint_range=-8,
    ),
    exogenous_effects=[
        (
            "seasonality",
            LinearFourierSeasonality(
                sp_list=["Y"],
                fourier_terms_list=[1],
                freq="Q",
                prior_scale=0.1,
                effect_mode="multiplicative",
            ),
            no_input_columns,
        )
    ],
    inference_engine=MAPInferenceEngine(),
)


model_hier.fit(y=y)

# %% [markdown]
# ### Forecasting with hierarchical prophet

# %%
preds_hier = model_hier.predict(fh=forecast_horizon)

plot_preds(
    y,
    preds={
        "Prophet": preds,
        "HierarchicalProphet": preds_hier,
    },
)

# %% [markdown]
# An important difference between the probabilistic features of the
# univariate and hierarchical models is that the latter returns quantiles which
# consider the correlation between the series. The samples used to compute such quantiles
# come from reconciled predictive distributions.
#

# %%
quantiles = model_hier.predict_quantiles(fh=forecast_horizon,
                                         alpha=[0.05, 0.95])
quantiles


# %%
fig, ax = plt.subplots(figsize=(10, 5))

selected_series = "__total"
series = quantiles.loc[selected_series]
ax.fill_between(
    series.index.to_timestamp(),
    series.iloc[:, 0],
    series.iloc[:, -1],
    alpha=0.5,
)
ax.scatter(y.loc[selected_series].index, y.loc[selected_series], marker="o", color="k", alpha=1)
fig.show()

# %% [markdown]
# ### Decomposition with hierarchical prophet
# We can also extract the components of the time series with the `predict_components`

# %%
from sktime.transformations.hierarchical.aggregate import Aggregator

sites = model_hier.predict_components(fh=forecast_horizon)
sites = Aggregator(flatten_single_levels=True).fit_transform(sites)

for column in sites.columns.difference(["obs"]):
    fig, axs = plt.subplots(
        figsize=(12, 8), nrows=int(np.ceil(len(LEVELS) / 2)), ncols=2
    )
    plot_preds(preds={column: sites[[column]]}, axs=axs)
    # Set figure title
    fig.suptitle(column)
    fig.tight_layout()

