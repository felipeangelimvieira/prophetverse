---
title: "Composition of effects"
description: "*This guide explains how to create effects that use the output of other effects.*"
---


```{python}
import warnings

warnings.simplefilter(action="ignore")
```

```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from numpyro import distributions as dist
import numpyro

numpyro.enable_x64()  # To avoid computational issues
```

## Import dataset

We import a dataset from Prophet's original repository. We then put it into sktime-friendly format, where the index is a `pd.PeriodIndex` and the colums are the time series.

```{python}
from prophetverse.datasets.loaders import load_peyton_manning

y = load_peyton_manning()
display(y.head())
```

The full dataset looks like this:

```{python}
y.plot.line(figsize=(8, 6))
plt.show()
```

## Fit model

Here, we will show how you can fit a simple model with Prophetverse. We first fit a model without seasonal components, and then fit a full model. We also show how easy it is to switch between Maximum A Posteriori (MAP) inference and Markov Chain Monte Carlo (MCMC).

### No seasonality

```{python}
from prophetverse.effects.ar import AREffect
from prophetverse.engine import MAPInferenceEngine
from prophetverse.sktime import Prophetverse
from prophetverse.utils import no_input_columns

import numpyro

numpyro.enable_x64()

model = Prophetverse(
    trend=AREffect(
        mean_reverting=True,
        phi_prior=dist.Normal(0.0, 1),
        sigma_prior=dist.HalfNormal(0.5),
        innovation_prior=dist.Normal(0.0, 1),
    ),
    inference_engine=MAPInferenceEngine(progress_bar=True),
)
model.fit(y=y)
```

```{python}
forecast_horizon = pd.period_range("2007-01-01", "2018-01-01", freq="D")
fig, ax = plt.subplots(figsize=(8, 5))
preds = model.predict(fh=forecast_horizon)
preds.plot.line(ax=ax)
ax.scatter(y.index, y, marker="o", color="k", s=2, alpha=0.5)
ax.set_ylim(0, 20)
```

### With seasonality

Here, we fit the univariate Prophet and pass an exogenous effect as hyperparameter. The `exogenous_effects` parameter let us add new components to the model and control the relationship between exogenous variables and the target variable.

In this case, the `LinearFourierSeasonality` effect creates sinusoidal and cosine terms to model the seasonality of the time series, which are then multiplied by linear coefficients and added to the model.

This argument is a list of tuples of the form `(effect_name, effect, regex_to_filter_relevant_columns)`, where `effect_name` is a string and `effect` is an instance of a subclass of `prophetverse.effects.BaseEffect`. The regex is used to filter the columns of X that are relevant for the effect, but can also be `None` (or its alias `prophetverse.utils.no_input_columns`) if no input in `X` is needed for the effect.

```{python}
from prophetverse.effects.fourier import LinearFourierSeasonality
from prophetverse.utils import no_input_columns

model = Prophetverse(
    trend=PiecewiseLinearTrend(
        changepoint_interval=500,
        changepoint_prior_scale=0.00001,
        changepoint_range=-500,
    ),
    exogenous_effects=[
        (
            "seasonality",
            LinearFourierSeasonality(
                freq="D",
                sp_list=[7, 365.25],
                fourier_terms_list=[3, 10],
                prior_scale=0.1,
                effect_mode="multiplicative",
            ),
            no_input_columns,
        ),
    ],
    inference_engine=MAPInferenceEngine(),
)
model.fit(y=y)
```

```{python}
forecast_horizon = pd.period_range("2007-01-01", "2018-01-01", freq="D")
fig, ax = plt.subplots(figsize=(8, 5))
preds = model.predict(fh=forecast_horizon)
preds.plot.line(ax=ax)
ax.scatter(y.index, y, marker="o", color="k", s=2, alpha=0.5)
ax.set_ylim(5, 10)
```

## Probabilistic forecasting

We can also make probabilistic forecasts with Prophetverse, in sktime fashion. The `predict_quantiles` method returns the quantiles of the predictive distribution in a `pd.DataFrame`

```{python}
quantiles = model.predict_quantiles(fh=forecast_horizon, alpha=[0.1, 0.9])
quantiles.head()
```

The plot below shows the (0.1, 0.9) quantiles of the predictive distribution

```{python}
fig, ax = plt.subplots(figsize=(8, 5))
# Plot area between quantiles
ax.fill_between(
    quantiles.index.to_timestamp(),
    quantiles.iloc[:, 0],
    quantiles.iloc[:, -1],
    alpha=0.5,
)
ax.scatter(y.index, y, marker="o", color="k", s=2, alpha=1)
```

## Timeseries decomposition

We can easily extract the components of the time series with the `predict_components` method. This method, in particular, is not implemented in sktime's `BaseForecaster`, but it is a method of `prophetverse.Prophetverse` class.

```{python}
sites = model.predict_components(fh=forecast_horizon)
sites.head()
```

```{python}
for column in sites.columns:
    fig, ax = plt.subplots(figsize=(8, 2))
    ax.plot(sites.index.to_timestamp(), sites[column], label=column)
    ax.set_title(column)
    fig.show()
```

## Fitting with MCMC

In the previous examples, we used MAP inference to fit the model. However, we can also use Markov Chain Monte Carlo (MCMC) to fit the model. To do this, we just need to change the `inference_engine` parameter to `MCMCInferenceEngine`. The rest of the code remains the same.

The `set_params` method is used to set the parameters of the model, in sklearn fashion.

```{python}
from prophetverse.engine import MCMCInferenceEngine

model.set_params(inference_engine=MCMCInferenceEngine(num_warmup=1000))


model.fit(y=y)
```

```{python}
quantiles = model.predict_quantiles(fh=forecast_horizon, alpha=[0.75, 0.25])
fig, ax = plt.subplots(figsize=(8, 5))
# Plot area between quantiles
ax.fill_between(
    quantiles.index.to_timestamp(),
    quantiles.iloc[:, 0],
    quantiles.iloc[:, -1],
    alpha=0.5,
)
ax.scatter(y.index, y, marker="o", color="k", s=2, alpha=1)
```

One interesting feature of MCMC is that it allows us to obtain samples from the posterior distribution of the parameters. In other words, we can also obtain probabilistic forecasts for the TS components.

```{python}
samples = model.predict_component_samples(fh=forecast_horizon)
samples
```

## Extra: syntax sugar

In Prophetverse, we've implemented the `>>` operator, which makes it easier to set `trend`, `exogenous_effects` and `inference_engine` parameters.

```{python}
trend = PiecewiseLinearTrend(
    changepoint_interval=300,
    changepoint_prior_scale=0.0001,
    changepoint_range=0.8,
)
exogenous_effects = [
    (
        "seasonality",
        LinearFourierSeasonality(
            freq="D",
            sp_list=[7, 365.25],
            fourier_terms_list=[3, 10],
            prior_scale=0.1,
            effect_mode="multiplicative",
        ),
        no_input_columns,
    ),
]
inference_engine = MAPInferenceEngine()

model = Prophetverse() >> trend >> exogenous_effects >> inference_engine
model.fit(y=y)
```

```{python}
forecast_horizon = pd.period_range("2007-01-01", "2018-01-01", freq="D")
fig, ax = plt.subplots(figsize=(8, 5))
preds = model.predict(fh=forecast_horizon)
preds.plot.line(ax=ax)
ax.scatter(y.index, y, marker="o", color="k", s=2, alpha=0.5)
```
