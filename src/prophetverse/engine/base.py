"""Numpyro inference engines for prophet models.

The classes in this module take a model, the data and perform inference using Numpyro.
"""

from collections.abc import Sequence
from typing import Literal

import jax
from skbase.base import BaseObject


class BaseInferenceEngine(BaseObject):
    """
    Class representing an inference engine for a given model.

    Parameters
    ----------
    model : Callable
        The model to be used for inference.
    rng_key : Optional[jax.random.PRNGKey]
        The random number generator key. If not provided, a default key with value 0
        will be used.

    Attributes
    ----------
    model : Callable
        The model used for inference.
    rng_key : jax.random.PRNGKey
        The random number generator key.
    """

    _tags = {
        "object_type": "inference_engine",
    }

    def __init__(self, rng_key=None):
        self.rng_key = rng_key

        if rng_key is None:
            rng_key = jax.random.PRNGKey(0)
        self._rng_key = rng_key

    # pragma: no cover
    def infer(self, model, **kwargs):
        """
        Perform inference using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The result of the inference.
        """
        self.model_ = model
        self._infer(**kwargs)

    # pragma: no cover
    def _infer(self, **kwargs):  # pragma: no cover
        """
        Perform inference using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The result of the inference.
        """
        raise NotImplementedError("infer method must be implemented in subclass")

    # pragma: no cover
    def predict(self, **kwargs):
        """
        Generate predictions using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The predictions generated by the model.
        """
        return self._predict(**kwargs)

    # pragma: no cover
    def _predict(self, **kwargs):  # pragma: no cover
        """
        Generate predictions using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The predictions generated by the model.
        """
        raise NotImplementedError("predict method must be implemented in subclass")

    def update(
        self,
        site_names: Sequence[str] = None,
        mode: Literal["full", "mean"] = "mean",
        **kwargs
    ):
        """
        Update some or all samples.

        Parameters
        ----------
        site_names:
            Site names to update.
        mode:
            Whether to update for each sample, or use mean of posterior samples not in ``site_names``.
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        Nothing.
        """
        return self._update(site_names or [], mode, **kwargs)

    def _update(
        self, site_names: Sequence[str], mode: Literal["full", "mean"], **kwargs
    ):
        raise NotImplementedError("update method must be implemented in subclass")
