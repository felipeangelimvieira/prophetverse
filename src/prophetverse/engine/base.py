"""Numpyro inference engines for prophet models.

The classes in this module take a model, the data and perform inference using Numpyro.
"""

import jax
from skbase.base import BaseObject


class BaseInferenceEngine(BaseObject):
    """
    Class representing an inference engine for a given model.

    Parameters
    ----------
    model : Callable
        The model to be used for inference.
    rng_key : Optional[jax.random.PRNGKey]
        The random number generator key. If not provided, a default key with value 0
        will be used.

    Attributes
    ----------
    model : Callable
        The model used for inference.
    rng_key : jax.random.PRNGKey, optional
        The JAX random number generator key to be used for any stochastic
        operations within the inference engine (e.g., parameter initialization,
        sampling in MCMC, or stochastic optimization in MAP).
        Its primary purpose is to ensure reproducibility of results.
        If not provided (i.e., set to `None`), a default key,
        `jax.random.PRNGKey(0)`, will be used.
        Users should provide their own key if they need to manage randomness
        explicitly across different runs or environments, for instance, when
        conducting experiments or ensuring consistent behavior in production.
    """

    _tags = {
        "object_type": "inference_engine",
    }

    def __init__(self, rng_key=None):
        if rng_key is None:
            self.rng_key = jax.random.PRNGKey(0)
        else:
            self.rng_key = rng_key
        # Store the key that will actually be used internally,
        # ensuring it's always a JAX PRNGKey.
        self._rng_key = self.rng_key

    # pragma: no cover
    def infer(self, model, **kwargs):
        """
        Perform inference using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The result of the inference.
        """
        self.model_ = model
        self._infer(**kwargs)

    # pragma: no cover
    def _infer(self, **kwargs):  # pragma: no cover
        """
        Perform inference using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The result of the inference.
        """
        raise NotImplementedError("infer method must be implemented in subclass")

    # pragma: no cover
    def predict(self, **kwargs):
        """
        Generate predictions using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The predictions generated by the model.
        """
        return self._predict(**kwargs)

    # pragma: no cover
    def _predict(self, **kwargs):  # pragma: no cover
        """
        Generate predictions using the specified model.

        Parameters
        ----------
        **kwargs
            Additional keyword arguments to be passed to the model.

        Returns
        -------
        The predictions generated by the model.
        """
        raise NotImplementedError("predict method must be implemented in subclass")
